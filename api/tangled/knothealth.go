// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package tangled

// schema: sh.tangled.knot.health

import (
	"context"

	"github.com/bluesky-social/indigo/lex/util"
)

const (
	KnotHealthNSID = "sh.tangled.knot.health"
)

// KnotHealth_Output is the output of a sh.tangled.knot.health call.
type KnotHealth_Output struct {
	// status: Health status of the knot
	Status string `json:"status" cborgen:"status"`
	// timestamp: Timestamp of the health check
	Timestamp *string `json:"timestamp,omitempty" cborgen:"timestamp,omitempty"`
	// version: Version of the knot server
	Version *string `json:"version,omitempty" cborgen:"version,omitempty"`
}

// KnotHealth calls the XRPC method "sh.tangled.knot.health".
func KnotHealth(ctx context.Context, c util.LexClient) (*KnotHealth_Output, error) {
	var out KnotHealth_Output
	if err := c.LexDo(ctx, util.Query, "", "sh.tangled.knot.health", nil, nil, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
